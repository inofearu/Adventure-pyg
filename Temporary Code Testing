strength = str(input('How many points do you want in strength? \n'))
if strength in str(range(0,stat_points)):
 strength = int(strength)
 stat_points = stat_points - strength
 print('You have',stat_points, 'left')

#Not being used anymore
#definition

def randassign():
  global stat_points
  r = random.randint(1,7)
  if r == 1:
    global strength
    stat_points = stat_points - 1
    strength = strength + 1
  if r == 2:
    global perception
    stat_points = stat_points - 1
    perception = perception + 1
  if r == 3:
    global endurance
    stat_points = stat_points - 1
    endurance = endurance + 1
  if r == 4:
    global charisma
    stat_points = stat_points - 1
    charisma = charisma + 1
  if r == 5:
    global intelligence
    stat_points = stat_points - 1
    intelligence = intelligence + 1
  if r == 6:
    global agility
    stat_points = stat_points - 1
    agility = agility + 1
  if r == 7:
    global luck
    stat_points = stat_points - 1
    luck = luck + 1
  if stat_points > 0:
    randassign()


#second part

  if stat_points > 0:
    print('\nYou have',stat_points, 'left\nDo you want to randomly assign the rest to different stats? Otherwise they will be voided\nY/N\n')
    randomorkeep = input('> ')
    randomorkeep = randomorkeep.lower()
    if randomorkeep in ["y","n"]:
      if randomorkeep in ["y"]:
        print("Assigning now...")
        randassign()
      else:
        print("Voiding points...")
        stat_points = 0
    if stat_points == 0:
    print(stat_points, 'stat points left')
    print('Strength -', strength)
    print('Perception -', perception)
    print('Endurance -', endurance)
    print('Intelligence -', intelligence)
    print('Agility -', agility)
    print('Luck -', luck)


dev_stats_assigned = 0


global dev_stats_assigned
      dev_stats_assigned = 1


if switch == 1:
  print('Creative stats assigned, skipping regular assignment')





def DrawBorder(color, Fill,X,Y,Height,Width,BorderSize, Location):
  global width
  global height
  if Location in ['L4']:
    X = (screen.get_width() // 4) - X
    Y = (screen.get_height() // 9) - Y
  pygame.draw.rect(screen, color, pygame.Rect(X,Y,Height,Width))
  pygame.draw.rect(screen, Fill, pygame.Rect(X+BorderSize,Y+BorderSize,Height-BorderSize,Width-BorderSize))
    pygame.display.flip()
  else:
    pygame.draw.rect(screen, color, pygame.Rect(X,Y,Height,Width))
    pygame.display.flip()

#previous idea that didnt work
class Biome:
  def __init__(self,Chunk,Row,Column,mapX,mapY):
    self.XStartPoint = Row*8
    self.YStartPoint = Column*8
    self.Chunk = ''
    amountofchunks = ((mapX//8)*(mapX//8))//4
    global i
    for i in range(0,amountofchunks):
      global m
      m += 1
      e = i*8
      f = i*8+8
      if self.XStartPoint >= e and self.XStartPoint <= f:
       if self.YStartPoint >= e and self.YStartPoint <= f:
         self.Chunk = m
         i = 7
      i += 1
    if self.Chunk in ['']:
      self.Chunk = 'Error'
    i = 0
    m = 0